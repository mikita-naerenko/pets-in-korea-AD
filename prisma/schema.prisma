// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Tag {
  id       String     @id @default(uuid())
  label    String
  rusTitle String
  images   TagImage[]
  articles Articles[]
  theme    Theme[]
  news     News[]
}

model TagImage {
  id        String   @id @default(uuid())
  tagId     String // Foreign Key to Product
  news      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade) //WTF??
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tagId])
}

model Articles {
  id           String   @id @default(uuid())
  userId       String
  title        String
  description  String
  content      String   @db.Text
  nameOfSource String?
  linkToSource String?  @db.Text
  authorName   String?
  authorLink   String?  @db.Text
  tags         Tag[]
  images       Image[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model News {
  id           String      @id @default(uuid())
  userId       String
  title        String
  description  String
  content      String      @db.Text
  nameOfSource String?
  linkToSource String?     @db.Text
  authorName   String?
  authorLink   String?     @db.Text
  images       NewsImage[]
  tags         Tag[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  articleId String // Foreign Key to Product
  article   Articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([articleId])
}

model NewsImage {
  id        String   @id @default(uuid())
  newsId    String // Foreign Key to Product
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([newsId])
}

model ThemeImage {
  id        String   @id @default(uuid())
  themeId   String // Foreign Key to Product
  theme     Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([themeId])
}

model Trash {
  id              String    @id @default(uuid())
  removedItemType String
  removedAt       DateTime  @default(now())
  label           String?
  rusLabel        String?
  title           String
  description     String?
  content         String?   @db.Text
  themeId         String?
  nameOfSource    String?
  linkToSource    String?   @db.Text
  authorName      String?
  authorLink      String?   @db.Text
  koreanPhraseId  String?
  phrases         Json?
  rusTranslates   Json?
  engTranslates   Json?
  createdAt       DateTime?
  updatedAt       DateTime?
  tags            Json?
  images          Json?
}

model KoreanPhrase {
  id            String         @id @default(uuid())
  authorId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  phrase        String
  theme         Theme          @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId       String
  engTranslates EngTranslate[]
  rusTranslates RusTranslate[]

  @@index([themeId])
}

model RusTranslate {
  id             String       @id @default(uuid())
  authorId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  translate      String
  transcription  String
  theme          String
  koreanPhrase   KoreanPhrase @relation(fields: [koreanPhraseId], references: [id], onDelete: Cascade)
  koreanPhraseId String

  @@index([koreanPhraseId])
}

model EngTranslate {
  id             String       @id @default(uuid())
  authorId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  translate      String
  transcription  String
  theme          String
  koreanPhrase   KoreanPhrase @relation(fields: [koreanPhraseId], references: [id], onDelete: Cascade)
  koreanPhraseId String

  @@index([koreanPhraseId])
}

model Theme {
  id          String         @id @default(uuid())
  label       String
  rusLabel    String
  description String
  tags        Tag[]
  images      ThemeImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  phrases     KoreanPhrase[]
}
